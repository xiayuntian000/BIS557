ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
final_lambda
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse
mse_avg
idx <- which(folds==i,arr.ind=TRUE)
idx
shuffle(folds)
dim(beta_mat)
optimize <- function(X,Y,k,start,end,length) {
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
return(final_lambda)
}
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
start=1e-10
end=400
N=500
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
k=5
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
final_lambda <- lambda_vals[which.min(mse_avg)]
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
length=500
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
n <- end/2; N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-2])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
taxi <-
read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
data(mtcars)
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
n <- end/2
N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
folds
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
lambda_vals
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
n <- end/2
N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
mse_total
mse_avg
optimize(X,Y,5,0.01,400,500)
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
folds
folds
shuffle(folds)
View(mtcars)
X=mtcars[:,-1]
X=mtcars[,-1]
Y=mtcars[,1]
optimize(X,Y,5,0.01,400,500)
n <- end/2
N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
folds
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
y_hat <- test_X %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
y_hat <- test_X %*% beta_mat
y_hat
dim(test_X)
dim(beta_mat)
test_X %*% beta_mat
y_hat <- crosspd(test_X, beta_mat)
y_hat <- crossprod(test_X, beta_mat)
class(test_X)
class(beta_mat)
y_hat <- as.matrix(test_X) %*% beta_mat
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
optimize(X,Y,5,0.01,400,500)
optimize <- function(X,Y,k,start,end,length) {
n <- end/2
N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
y_hat <- as.matrix(test_X) %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
return(final_lambda)
}
optimize(X,Y,5,0.01,400,500)
fit_ridge <- lm.ridge(mpg ~ ., mtcars, lambda = lambda_vals)
lmridge_lambda<- fit_ridge$lambda[which.min(fit_ridge$GCV)]
lmridge_lambda
lmridge_lambda<-cv.glmnet(X,Y,nfolds=5,lambda = lambda_vals)
library(glmnet)
lmridge_lambda<-cv.glmnet(X,Y,nfolds=5,lambda = lambda_vals)
lmridge_lambda<-cv.glmnet(X,as.double(Y),nfolds=5,lambda = lambda_vals)
lmridge_lambda<-cv.glmnet(as.double(X),as.double(Y),nfolds=5,lambda = lambda_vals)
lmridge_lambda<-cv.glmnet(as.matrix(X),as.matrix(Y),nfolds=5,lambda = lambda_vals)
lmridge_lambda
lmridge_lambda<- fit_ridge$lambda[which.min(fit_ridge$GCV)]
lmridge_lambda
my_lambda
my_lambda <- optimize(X,Y,5,1e-10,400,500)
my_lambda
my_lambda <- optimize(X,Y,10,1e-10,400,500)
my_lambda
taxi
taxi <-
read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
taxi <- read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
?read_csv
??read_csv
library(readr)
taxi <- read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
View(taxi)
taxi <- read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
library(readr)
taxi <- read_csv("https://github.com/statsmaths/ml_data/raw/master/nyc_taxi.csv")
fit_ridge <- lm.ridge(mpg ~ ., mtcars, lambda = lambda_vals)
fit_ridge
lmridge_lambda<- fit_ridge$lambda[which.min(fit_ridge$GCV)]
lmridge_lambda
lmridge_lambda
test_that("You optimization() function works in an easy case.", {
data(iris)
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
my_lambda <- optimize(X,Y,10,1e-10,400,500)
#fit_glmnet <- glmnet(X,Y,alpha=0,lambda = lamb)
n <- 200
N <- 500
L=n*2
k=5
# proportion=1/k
# folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
# mse_total=NULL
# for(i in 1:k){
#   idx <- which(folds==i,arr.ind=TRUE)
#   test_X <- X[idx, ]
#   train_X <- X[-idx, ]
#   test_Y <- Y[idx ]
#   train_Y <- Y[-idx]
#   lambda_vals <- seq(1e-10, L, length.out = N)
#    beta_mat <- rep(0, n*2)
#   for (i in 1:n*2){
#      ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = lambda_vals[i] )
#      beta_mat[i] <- ridge_me$coefficients  }
#
#   beta_mat <- sapply(lambda_vals,function(x) {
#     ridge_me <- lm.ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
#     return(matrix(as.double(ridge_me$coefficients[-2])))
#   })
#   y_hat <- test_X %*% beta_mat
#   y_hat <- crossprod(X, beta_mat)
#   #mse <- apply((y_hat - y_test)^2, 2, mean)
#   mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
#   mse_total=cbind(mse_total,mse)
# }
# mse_avg=apply(mse_total,1,mean)
# lmridge_lambda <- lambda_vals[which.min(mse_avg)]
#lmridge_lambda <- ridgereg.cv(Y,X,5 ,lambda_vals)
lambda_vals <- seq(1e-10, L, length.out = N)
fit_ridge <- lm.ridge(Sepal.Length ~ ., iris, lambda = lambda_vals)
#fit_ridge <- lm.ridge(mpg ~ ., mtcars, lambda = lambda_vals)
lmridge_lambda<- fit_ridge$lambda[which.min(fit_ridge$GCV)]
#lmridge_lambda<-cv.glmnet(as.matrix(X),as.matrix(Y),nfolds=5,lambda = lambda_vals)
expect_equivalent(my_lambda,lmridge_lambda ,
tolerance = 0.01)
})
my_lambda <- optimize(X,Y,10,1e-10,400,500)
my_lambda
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
my_lambda <- optimize(X,Y,10,1e-10,400,500)
my_lambda
set.seed(38)
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
my_lambda <- optimize(X,Y,10,1e-10,400,500)
my_lambda
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
my_lambda <- optimize(X,Y,5,1e-10,400,500)
my_lambda
optimize <- function(X,Y,k,start,end,length) {
n <- end/2
N <- length
L=end
proportion=1/k
folds <- cut(seq(1,nrow(X)),breaks=k,labels=FALSE)
#permute::shuffle(folds)
mse_total=NULL
lambda_vals <- seq(start, L, length.out = N)
for(i in 1:k){
idx <- which(folds==i,arr.ind=TRUE)
test_X <- X[idx, ]
train_X <- X[-idx, ]
test_Y <- Y[idx ]
train_Y <- Y[-idx]
lambda_vals <- seq(start, L, length.out = N)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(train_Y ~ ., as.data.frame(cbind(train_X,train_Y)), lambda = x)
return(matrix(as.double(ridge_me$coefficients[-1])))
})
y_hat <- as.matrix(test_X) %*% beta_mat
#y_hat <- crossprod(X, beta_mat)
#mse <- apply((y_hat - y_test)^2, 2, mean)
mse <- as.matrix(apply((y_hat - test_Y)^2, 2, mean))
mse_total=cbind(mse_total,mse)
}
mse_avg=apply(mse_total,1,mean)
lambda_vals <- seq(start, L, length.out = N)
final_lambda <- lambda_vals[which.min(mse_avg)]
return(final_lambda)
}
my_lambda <- optimize(X,Y,5,1e-10,400,500)
my_lambda
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::test()
