Y <- iris$Sepal.Length
fit_glmnet <- glmnet(X,Y,alpha=0,lambda = lamb)
expect_equivalent(as.double(fit_my_ridge$coefficients),as.double(coef(fit_glmnet,s=lamb))[-2],
tolerance = 100)
})
test_check("homework2")
devtools::test()
devtools::test()
expect_equivalent(as.double(fit_my_ridge$coefficients),as.double(coef(fit_glmnet,s=lamb))[-2],
tolerance = 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
setwd("~/path/to/package")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
#original
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
X <- matrix(rnorm(n * p), ncol = p)
X[,1]
View(X)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
mean(l2_errors)
max(svals) / min(svals)
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
library(homework2)
X2 <- model.matrix(Sepal.Length ~ .,iris)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals <- svd(X2)$d
max(svals) / min(svals)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals2 <- svd(X2)$d
max(svals2) / min(svals2)
X2+diag(x=lamb,nrow=nrow(X2))
diag(x=lamb,nrow=nrow(X2))
crossprod(t(X2)%*%(X2)
)
t(X2)%*%(X2)
t(X2)%*%(X2)+diag(x=lamb,nrow=nrow(X2))
X2
dim(t(X2)%*%(X2))
betahat <- solve(crossprod(t(X2)%*%(X2)+diag(x=lamb,nrow=ncol(X2))), crossprod(X, y))
t(X2)%*%(X2)+diag(x=lamb,nrow=ncol(X2))
#original
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
library(homework2)
data(iris)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals2 <- svd(X2)$d
max(svals2) / min(svals2)
lamb=0.1
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
library(homework2)
data(iris)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals2 <- svd(X2)$d
max(svals2) / min(svals2)
lambda=0.1
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
library(homework2)
data(iris)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals2 <- svd(X2)$d
max(svals2) / min(svals2)
lambda=0.1
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
#original
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
library(homework2)
set.seed(38)
data(iris)
X2 <- model.matrix(Sepal.Length ~ .,iris)
Y2 <- iris$Sepal.Length
svals2 <- svd(X2)$d
max(svals2) / min(svals2)
lambda=0.1
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
svals <- svd(X+ diag(rep(lambda, ncol(X))))$d
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
casl_ols_svd  <-
function(X, y)
{
svd_output <- svd(X)
r <- sum(svd_output$d > .Machine$double.eps)
Directly solving the linear system 19
casl_ols_svd  <- function(X, y){
svd_output <- svd(X)
r <- sum(svd_output$d > .Machine$double.eps)
U <- svd_output$u[, 1:r]
V <- svd_output$v[, 1:r]
beta <- V %*% (t(U) %*% y / svd_output$d[1:r])
beta
}
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
#Reproduce
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#Unstable
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#Reproduce
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable
svals <- svd(t(X)%*%X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#Unstable
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(t(X)%*%X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
#Unstable, with ridge
#Unstable
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- casl_ols_svd(t(X)%*%X+diag(rep(lambda, ncol(X))), y)
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- casl_ols_svd(crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X), y)
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- casl_ols_svd(solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X), y)
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- casl_ols_svd(t(X)%*%X+diag(rep(lambda, ncol(X))), y)
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
#Unstable, with ridge
#Unstable
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
set.seed(38)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
#Stable, with ridge
lambda=0.1
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
l2_errors2 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
#Unstable, with ridge
#Unstable
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(t(X)%*%X+diag(rep(lambda, ncol(X))))$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat2 <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% y
l2_errors2[k] <- sqrt(sum((betahat2 - beta)^2))
}
mean(l2_errors2)
n <- 200; p <- 4; N <- 500; M <- 20
lambda_vals <- seq(0, n*2, length.out = N)
lambda_vals
beta_mat <- rep(0, n*2)
for (i in 1:n*2){
beta_mat[i] <- ridge(form, data, lambda = lambda_vals[i] )
}
for (i in 1:n*2){
beta_mat[i] <- ridge(Sepal.Length ~ ., iris, lambda = lambda_vals[i] )
}
ridge(Sepal.Length ~ ., iris, lambda = lambda_vals[i] )
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- rep(0, n*2)
for (i in 1:n*2){
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = lambda_vals[i] )
beta_mat[i] <- ridge_me$coefficients
}
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = lambda_vals[i] )
beta_mat[i] <- ridge_me$coefficients
?apply
beta_mat <- apply(lambda_vals,1,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(ridge_me$coefficients)
})
lambda_vals
dim(lambda_vals)
lambda_vals <- seq(0, n*2, length.out = N)
lambda_vals <- seq(0, n*2, length.out = N)
dim(lambda_vals)
beta_mat <- lapply(lambda_vals,1,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(ridge_me$coefficients)
})
beta_mat <- lapply(lambda_vals,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(ridge_me$coefficients)
})
ridge_me$coefficients
class(ridge_me$coefficients)
dim(ridge_me$coefficients)
beta_mat[1]
mean( beta_mat[1])
as.double(ridge_me$coefficients)
beta_mat <- lapply(lambda_vals,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(as.double(ridge_me$coefficients))
})
dim(beta_mat)
mean(beta_mat[1])
beta_mat[1]
beta_mat[1,]
beta_mat[,1]
beta_mat <- lapply(lambda_vals,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(as.matrix(ridge_me$coefficients))
})
return(matrix(as.double(ridge_me$coefficients)))
beta_mat
beta_mat <- lapply(lambda_vals,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(matrix(as.double(ridge_me$coefficients)))
})
as.matrix(beta_mat)
matrix(beta_mat)
beta_mat <- sapply(lambda_vals,function(x) {
ridge_me <- ridge(Sepal.Length ~ ., iris, lambda = x)
return(matrix(as.double(ridge_me$coefficients)))
})
y_hat <- tcrossprod(X, beta_mat)
dim(X)
X <- model.matrix(Sepal.Length ~ .,iris)
Y <- iris$Sepal.Length
dim(X)
y_hat <- tcrossprod(X, beta_mat)
dim(beta_mat)
y_hat <- crossprod(X, beta_mat)
y_hat <- X %*% beta_mat
dim(lambda_vals)
len(lambda_vals)
length(lambda_vals)
?tcrossprod
y_hat <- crossprod(X, beta_mat)
y_hat <- X %*% beta_mat
dim(y_hat)
Y <- iris$Sepal.Length
mse <- apply((y_hat - Y)^2, 2, mean)
dim(mse)
lambda_vals[which.min(mse)]
mse
min(mse)
dim(y_hat)
L=n*2
lambda_vals <- seq(0, L, length.out = N)
lambda_vals <- seq(0, L, length.out = N)
n <- 200; N <- 500
L=n*2
lambda_vals <- seq(0, L, length.out = N)
dim(lambda_vals)
len(lambda_vals)
length(lambda_vals\)
length(lambda_vals
)
?seq
